image: registry.gitlab.com/edea-dev/ci-runner:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv
    - .hypothesis

before_script:
  - python3 --version # For debugging
  - poetry install
  - pip install nox

test:
  script:
    - nox -- --cov=edea
    - nox -- --doctest-modules edea/types

formatting:
  script:
    - poetry run black --check edea tests --exclude tests/kicad_projects

lint:
  script:
    - poetry run ruff edea tests
    - poetry run pylint edea

typecheck:
  script:
    - poetry run pyright edea

bandit:
  script:
    - poetry run bandit -r edea

docs:
  script:
    # import annotations in all edea/types/pcb files to make sphinx type alias work
    - find edea/types/pcb -type f -name "*.py" -exec sed -i '1i\from __future__ import annotations' {} +
    - poetry run sphinx-build -b html docs docs/_build
    - cp -r docs/_build public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test-long-running:
  only:
    - web
  script:
    - git submodule update --init
    # the serialize test parses and serializes so we just run that
    - poetry run pytest -k 'serialize_all'

release:
  stage: deploy
  script:
    - poetry build
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry config http-basic.gitlab gitlab-ci-token ${CI_JOB_TOKEN}
    - poetry publish -r gitlab
  artifacts:
    paths:
      - dist/*.whl
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
