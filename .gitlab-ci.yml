image: registry.gitlab.com/edea-dev/ci-runner:latest


# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv
    - .hypothesis

before_script:
  # For debugging
  - python3 --version 
  - kicad-cli version
  - poetry install

test:
  script:
    - git config --global --add safe.directory "$(pwd)"
    - nox -- --cov=edea
    - nox -- --doctest-modules edea
    - poetry run coverage report
    - poetry run coverage xml
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

formatting:
  script:
    - poetry run black --check edea tests --exclude tests/kicad_projects

lint:
  script:
    - poetry run ruff check edea tests --exclude tests/kicad_projects/kicad-test-files
    - poetry run pylint edea

typecheck:
  script:
    - poetry run pyright edea

bandit:
  script:
    - poetry run bandit -r edea

test-long-running:
  only:
    - web
  script:
    # not sure why this is needed but submodule update fails without it
    - git config --global --add safe.directory "$(pwd)"
    - git submodule update --init
    - poetry run pytest -k 'load_all_kicad_pro'
    # the serialize test parses and serializes so we just run that
    - poetry run pytest -k 'serialize_all'

release:
  stage: deploy
  script:
    - poetry build
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry config http-basic.gitlab gitlab-ci-token ${CI_JOB_TOKEN}
    - poetry publish -r gitlab
  artifacts:
    paths:
      - dist/*.whl
  rules:
    - if: $CI_COMMIT_BRANCH == "release"

pages:
  script:
    # download old docs to support multiple versions
    - |
      DOWNLOAD_URL='https://gitlab.com/api/v4/projects/35843774/jobs/artifacts/main/download?job=pages'
      curl -L --output old.zip "$DOWNLOAD_URL"
      unzip -q old.zip -d .

    # build new doccs
    ## import annotations in all edea/kicad/pcb files to make sphinx type alias work
    - find edea/kicad/pcb -type f -name "*.py" -exec sed -i '1i\from __future__ import annotations' {} +
    - poetry run sphinx-build -b html docs docs/_build
    ## add new docs to old docs
    - mkdir -p "public/$(poetry version --short)"
    - cp -r docs/_build/* "public/$(poetry version --short)"

    # if the current version of the docs is the latest, copy it to public/latest
    - poetry run python docs/is_latest.py && rm -rf public/latest && mkdir public/latest && cp -r docs/_build/* public/latest || echo "not latest"
    - poetry run python docs/generate_versions.json.py public/versions.json
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "pages"

build:nix:
  # https://docs.cachix.org/continuous-integration-setup/gitlab
  # image: docker.nix-community.org/nixpkgs/cachix-flakes
  allow_failure: true 

  before_script:
    # We should only execute a single command in this phase, so this overrides the global before_script
    -farthisisn;ta caocamdnaisdauhfwduthqepui tpuih
    - mkdir -p "$HOME/.config/nix"
    - echo 'experimental-features = nix-command flakes' > "$HOME/.config/nix/nix.conf"
    - nix profile install nixpkgs#cachix  
    - cachix authtoken $CACHIX_TOKEN

  cache: [] 

  variables:
    CACHIX_CACHE_NAME: edea-test-cachix
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

  script:
    - cachix watch-exec $CACHIX_CACHE_NAME -- nix build -L
